---
- name: Configure Kubernetes cluster with role-based installation
  hosts: k8s_cluster
  become: yes
  vars:
    kubernetes_version: "{{ kubectl_version.stdout | default('') }}"

  tasks:
    # 공통 설정 (모든 노드)
    - name: Update /etc/hosts with all cluster nodes
      blockinfile:
        path: /etc/hosts
        backup: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK - K8S CLUSTER"
        block: |
          192.168.127.129 k8s-master
          192.168.127.130 k8s-worker1
          192.168.127.131 k8s-worker2
          192.168.127.132 k8s-worker3

    - name: Set hostname based on inventory
      hostname:
        name: "{{ inventory_hostname }}"

    # Swap 비활성화 (모든 노드 필수)
    - name: Disable swap
      shell: swapoff -a

    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes

    # 방화벽 비활성화 (모든 노드)
    - name: Disable UFW firewall
      ufw:
        state: disabled

    # 기본 패키지 설치 (모든 노드)
    - name: Install basic dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
          - apt-transport-https
        state: present
        update_cache: no

    # 컨테이너 런타임 설치 (모든 노드 필수)
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: no

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate containerd config
      shell: containerd config default > /etc/containerd/config.toml

    - name: Configure containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: "SystemdCgroup = false"
        replace: "SystemdCgroup = true"

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    # 커널 모듈 및 시스템 설정 (모든 노드)
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - br_netfilter
        - overlay

    - name: Make kernel modules persistent
      copy:
        content: |
          br_netfilter
          overlay
        dest: /etc/modules-load.d/k8s.conf

    - name: Configure sysctl for Kubernetes
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/k8s.conf

    - name: Apply sysctl settings
      shell: sysctl --system

    # Kubernetes 버전 확인 (모든 노드)
    - name: Get latest kubectl version
      shell: curl -L -s https://dl.k8s.io/release/stable.txt
      register: kubectl_version

    # 공통 Kubernetes 바이너리 설치 (모든 노드)
    - name: Download kubelet binary (required on all nodes)
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/arm64/kubelet"
        dest: /usr/local/bin/kubelet
        mode: "0755"

    - name: Download kubeadm binary (required on all nodes)
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/arm64/kubeadm"
        dest: /usr/local/bin/kubeadm
        mode: "0755"

    # kubectl 설치 (마스터 노드 + 선택적으로 워커 노드)
    - name: Download kubectl binary (master + optional for workers)
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/arm64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: "0755"

    # kubelet 서비스 설정 (모든 노드)
    - name: Create kubelet systemd service
      copy:
        content: |
          [Unit]
          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/
          Wants=network-online.target
          After=network-online.target

          [Service]
          ExecStart=/usr/local/bin/kubelet
          Restart=always
          StartLimitInterval=0
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/kubelet.service

    - name: Create kubelet service directory
      file:
        path: /etc/systemd/system/kubelet.service.d
        state: directory

    - name: Create kubelet service override
      copy:
        content: |
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
          EnvironmentFile=-/etc/default/kubelet
          ExecStart=
          ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

    - name: Reload systemd and enable kubelet
      systemd:
        name: kubelet
        enabled: yes
        daemon_reload: yes

    # 마스터 노드 전용 설정
    - name: Create kubernetes config directory (master only)
      file:
        path: /etc/kubernetes
        state: directory
        owner: root
        group: root
        mode: "0755"
      when: inventory_hostname == 'k8s-master'

    # 버전 확인
    - name: Check installed versions
      shell: |
        echo "kubelet: $(kubelet --version)"
        echo "kubeadm: $(kubeadm version --output=short)"
        echo "kubectl: $(kubectl version --client --output=yaml | grep gitVersion)"
      register: version_check
      changed_when: false

    - name: Display installed versions
      debug:
        msg: "{{ version_check.stdout_lines }}"

# 별도 플레이 - 마스터 노드 초기화
- name: Initialize Kubernetes master
  hosts: k8s-master
  become: yes
  tasks:
    - name: Initialize Kubernetes cluster
      shell: |
        kubeadm init \
          --apiserver-advertise-address=192.168.127.129 \
          --pod-network-cidr=10.244.0.0/16 \
          --service-cidr=10.96.0.0/12
      register: kubeadm_init
      when: not ansible_check_mode

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: "0755"

    - name: Copy admin.conf to .kube/config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: "0644"

    - name: Create .kube directory for ubuntu user
      file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant
        mode: "0755"

    - name: Copy admin.conf to ubuntu user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: "0644"

    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command
      when: not ansible_check_mode

    - name: Save join command to file
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/kubeadm-join-command
      when: not ansible_check_mode

    - name: Display join command
      debug:
        msg: "Join command: {{ join_command.stdout }}"
      when: not ansible_check_mode

# 별도 플레이 - 워커 노드 조인 (수동 실행 필요)
- name: Join worker nodes to cluster
  hosts: k8s-worker*
  become: yes
  tasks:
    - name: Display instruction for joining workers
      debug:
        msg: |
          To join worker nodes to the cluster, run the following command on each worker:
          1. Get the join command from master: cat /tmp/kubeadm-join-command
          2. Run the join command on this worker node

          Or use this playbook with the join command variable set.
