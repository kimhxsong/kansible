---
- name: Safe Kubernetes cluster reset
  hosts: k8s_cluster
  become: yes
  tasks:
    - name: Display reset warning
      debug:
        msg: |
          ‚ö†Ô∏è  Starting Kubernetes cluster reset...
          This will remove all cluster configuration while preserving system settings.

    - name: Check if kubeadm exists and is executable
      stat:
        path: /usr/local/bin/kubeadm
      register: kubeadm_check

    - name: Check current cluster status
      shell: kubectl get nodes --no-headers 2>/dev/null | wc -l
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: cluster_node_count
      ignore_errors: yes
      when: kubeadm_check.stat.exists

    - name: Display current cluster info
      debug:
        msg: |
          Current cluster status:
          - kubeadm available: {{ kubeadm_check.stat.exists | default(false) }}
          - Active nodes: {{ cluster_node_count.stdout | default('0') }}
      when: kubeadm_check.stat.exists

    - name: Reset kubeadm (remove existing cluster configuration)
      shell: kubeadm reset -f --cleanup-tmp-dir
      when: kubeadm_check.stat.exists and kubeadm_check.stat.executable
      ignore_errors: yes

    - name: Stop kubelet service
      systemd:
        name: kubelet
        state: stopped
      ignore_errors: yes

    - name: Kill any remaining kubelet processes
      shell: |
        pkill -f kubelet || true
        pkill -f kube-proxy || true
        pkill -f kube-apiserver || true
        pkill -f kube-controller-manager || true
        pkill -f kube-scheduler || true
        pkill -f etcd || true
      ignore_errors: yes

    - name: Unmount kubelet directories
      shell: |
        # Unmount any remaining kubelet mounts
        for mount in $(mount | grep '/var/lib/kubelet' | awk '{print $3}'); do
          umount "$mount" 2>/dev/null || true
        done
        # Unmount any remaining container mounts
        for mount in $(mount | grep '/run/containerd' | awk '{print $3}'); do
          umount "$mount" 2>/dev/null || true
        done
      ignore_errors: yes

    - name: Remove Kubernetes configuration directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/cni
        - /run/flannel
        - /var/lib/containerd/io.containerd.grpc.v1.cri/sandboxes
        - /var/lib/containerd/io.containerd.grpc.v1.cri/containers
      ignore_errors: yes

    - name: Remove user kube configs
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/.kube
        - /home/ubuntu/.kube
        - /home/vagrant/.kube
      ignore_errors: yes

    # ÏïàÏ†ÑÌïú iptables Ï†ïÎ¶¨ (Í∏∞Î≥∏ Ï†ïÏ±Ö Î≥¥Ï°¥)
    - name: Clean up Kubernetes iptables rules safely
      shell: |
        # Kubernetes Í¥ÄÎ†® Ï≤¥Ïù∏Îßå ÏÇ≠Ï†ú (Í∏∞Î≥∏ ÎÑ§Ìä∏ÏõåÌÅ¨Îäî Î≥¥Ï°¥)
        iptables -t nat -D POSTROUTING -s 10.244.0.0/16 -j MASQUERADE 2>/dev/null || true
        iptables -t nat -D POSTROUTING -s 10.96.0.0/12 -j MASQUERADE 2>/dev/null || true

        # Kubernetes Í¥ÄÎ†® Ï≤¥Ïù∏ ÏÇ≠Ï†ú
        iptables -t nat -F KUBE-SERVICES 2>/dev/null || true
        iptables -t nat -X KUBE-SERVICES 2>/dev/null || true
        iptables -t nat -F KUBE-NODEPORTS 2>/dev/null || true
        iptables -t nat -X KUBE-NODEPORTS 2>/dev/null || true
        iptables -t nat -F KUBE-POSTROUTING 2>/dev/null || true
        iptables -t nat -X KUBE-POSTROUTING 2>/dev/null || true
        iptables -t nat -F KUBE-MARK-MASQ 2>/dev/null || true
        iptables -t nat -X KUBE-MARK-MASQ 2>/dev/null || true

        iptables -F KUBE-SERVICES 2>/dev/null || true
        iptables -X KUBE-SERVICES 2>/dev/null || true
        iptables -F KUBE-EXTERNAL-SERVICES 2>/dev/null || true
        iptables -X KUBE-EXTERNAL-SERVICES 2>/dev/null || true
        iptables -F KUBE-FORWARD 2>/dev/null || true
        iptables -X KUBE-FORWARD 2>/dev/null || true
      ignore_errors: yes

    # CNI Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Îßå ÏïàÏ†ÑÌïòÍ≤å Ï†úÍ±∞
    - name: Remove CNI interfaces only (preserve system interfaces)
      shell: |
        # CNI Í¥ÄÎ†® Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Îßå Ï†úÍ±∞
        ip link delete cni0 2>/dev/null || true
        ip link delete flannel.1 2>/dev/null || true
        ip link delete kube-bridge 2>/dev/null || true
        ip link delete weave 2>/dev/null || true
        ip link delete datapath 2>/dev/null || true

        # ÏãúÏä§ÌÖú Ï§ëÏöî Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Îäî Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå (eth0, lo, docker0 Îì±)
      ignore_errors: yes

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/kubeadm-join-command
        - /tmp/kube*
      ignore_errors: yes

    - name: Clean up any remaining containers
      shell: |
        # Stop and remove all containers (if any)
        if command -v crictl >/dev/null 2>&1; then
          crictl stop $(crictl ps -q) 2>/dev/null || true
          crictl rm $(crictl ps -aq) 2>/dev/null || true
          crictl rmi $(crictl images -q) 2>/dev/null || true
        fi
      ignore_errors: yes

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Wait for containerd to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 30
      ignore_errors: yes

    - name: Start kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes
      ignore_errors: yes

    - name: Verify network connectivity
      shell: ping -c 1 8.8.8.8
      register: network_test
      ignore_errors: yes

    - name: Verify services status
      shell: |
        echo "=== Service Status ==="
        systemctl is-active containerd || echo "containerd: inactive"
        systemctl is-active kubelet || echo "kubelet: inactive" 
        echo "=== Network Interfaces ==="
        ip link show | grep -E '^[0-9]+:' | awk '{print $2}' | sed 's/:$//'
        echo "=== Mount Points ==="
        mount | grep -E '(kubelet|kubernetes|cni)' || echo "No K8s mounts remaining"
      register: service_status
      ignore_errors: yes

    - name: Display network and service status
      debug:
        msg: |
          Network connectivity: {{ 'OK' if network_test.rc == 0 else 'FAILED' }}

          {{ service_status.stdout }}

          {% if network_test.rc != 0 %}
          ‚ö†Ô∏è  Network connectivity failed - node may need manual recovery.
          {% endif %}

    - name: Reset completion message
      debug:
        msg: |
          ‚úÖ Enhanced Kubernetes cluster reset completed!

          üßπ Cleaned up:
          - Kubernetes configuration files and directories
          - Container runtime state (images, containers, sandboxes)
          - Kubernetes-specific iptables rules
          - CNI interfaces and configurations
          - Kubelet processes and mounts
          - Temporary files and caches

          üîí Preserved:
          - System network configuration
          - SSH connectivity and system services
          - Host OS configuration
          - Container runtime (containerd) ready for reuse

          üìã Next steps:
          - Run 'make cluster' to reconfigure the cluster
          - Check service status if any issues occurred
          - Verify network connectivity on all nodes

    - name: Download and install correct CNI plugins (arm64)
      when: system_arch.stdout in ["aarch64", "arm64"]
      shell: |
        export CNI_VERSION="v1.3.0"
        curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-arm64-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz
